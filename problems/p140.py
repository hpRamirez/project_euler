#coding: UTF-8
# Consider the infinite polynomial series AG(x) = xG1 + x^2G2
# + x^3G3 + ..., where Gk is the kth term of the second order
# recurrence relation G_k = G_{k − 1} + G_{k − 2}, G1 = 1 and
# G2 =  4; that is, 1, 4, 5, 9, 14, 23, ... .
#
# For this problem we shall be concerned with values of x for
# which AG(x) is a positive integer.
#
# The corresponding values of x for the first five natural
# numbers are shown below.
#
# x	          AG(x)
# (√5−1)/4	    1
# 2/5            2
# (√22−2)/6	    3
# (√137−5)/14    4
# 1/2            5
#
# We shall call AG(x) a golden nugget if x is rational,
# because they become increasingly rarer; for example, the
# 20th golden nugget is 211345365.
#
# Find the sum of the first thirty golden nuggets.

import math

def sol_set(fund_sol, fund_can_sol, D, max = 15):
    """
        Returns a list with as many solutions (x, y) as
        specified by the max parameter of the equation
        x^2 - Dy^2 = K (1), given a fundamental independent
        solution for the given value of K, the fundamental
        solution if K = 1, and the D.

        It may happen that the equation has more than one
        fundamental independent solution (depends on the
        factors of K), in which case each of the independent
        solutions generates an equivalence class for the
        solution space of the equation.

        Even so, every solution inside their respective class
        can be found with the same recurrence:

        x_k + y_k\sqrt{D} =
            (a + b\sqrt(D))^k(x_0 +y_0\sqrt{D}),

        where (a, b) is the fundamental solution of (1) setting
        K = 1, (x_0, y_0) the fundamental solution of (1).
    """
    l = []
    x, y = fund_sol[0], fund_sol[1]
    a, b = fund_can_sol[0], fund_can_sol[1]
    j = 1
    while j < max:
        x, y = a * x + D * b * y, b * x + a * y
        j+= 1
        l.append(y)
    return l

def p140():
    # so, the idea here is to find at least 28 solutions
    # with x % 5 = 2 (which luckily are among the first 90,
    # the first 15 from each solution set), and sum them up:

    ys = sol_set([7, 1], [9, 4], 5) + \
    sol_set([8, 2], [9, 4], 5) + \
    sol_set([13, 5], [9, 4], 5) + \
    sol_set([17, 7], [9, 4], 5) + \
    sol_set([32, 14], [9, 4], 5) + \
    sol_set([43, 19], [9, 4], 5)

    xs = map(lambda y: int(math.sqrt(5 * (y ** 2) + 44)), ys)
    xs_ = [(k - 7) // 5 for k in xs if k % 5 == 2]
    final = sorted(xs_)

    # here, n = 2 is generated by (17, 7), and n = 5 by
    # (32, 14), both fundamental independent solutions to
    # x^2 - 5y^2 = 44, so they are not returned by
    # sol_set(), hence we have to sum them up in the end:

    return sum(final[:28]) + 7

print(p140())